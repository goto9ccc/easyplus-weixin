<style type="css">
.ec-canvas {
  width: 100%;
  height: 100%;
}
</style>
<template>
<canvas class="ec-canvas" canvas-id="ec-canvas"  bindtouchstart="touchStart" bindtouchmove="touchMove" bindtouchend="touchEnd">
</canvas>
</template>
<script>
import wepy from 'wepy';
import WxCanvas from '../lib/wx-canvas';
import * as echarts from '../lib/echarts';

let ctx;
export default class echart extends wepy.component {
    props = {
        ec: {}
    };

    data = {
        canvasId: 'ec-canvas',
    };

    onLoad () {
        if (!this.data.ec) {
            console.warn('组件需绑定 ec 变量，例：<ec-canvas id="mychart-dom-bar" ' +
                'canvas-id="mychart-bar" ec="{{ ec }}"></ec-canvas>');
            return;
        }
        if (!this.data.ec.lazyLoad) {
            this.init();
        }
    };
    initChart (canvas, width, height, option) {
        const chart = echarts.init(canvas, null, {
            width: width,
            height: height
        });
        canvas.setChart(chart);
        chart.setOption(this.ec.option);
        return chart;
    };
    init (callback) {
        const version = wepy.getSystemInfoSync().SDKVersion.split('.').map(n => parseInt(n, 10));
        const isValid = version[0] > 1 || (version[0] === 1 && version[1] > 9) ||
            (version[0] === 1 && version[1] === 9 && version[2] >= 91);
        if (!isValid) {
            console.error('微信基础库版本过低，需大于等于 1.9.91。' +
                '参见：https://github.com/ecomfe/echarts-for-weixin' +
                '#%E5%BE%AE%E4%BF%A1%E7%89%88%E6%9C%AC%E8%A6%81%E6%B1%82');
            return;
        }
        ctx = wepy.createCanvasContext(this.data.canvasId, this);

        const canvas = new WxCanvas(ctx, this.data.canvasId);

        echarts.setCanvasCreator(() => {
            return canvas;
        });

        var query = wepy.createSelectorQuery();
        query.select('.ec-canvas').boundingClientRect(res => {
            if (typeof callback === 'function') {
                this.chart = callback(canvas, res.width, res.height);
            } else if (this.data.ec) {
                this.chart = this.initChart(canvas, res.width, res.height);
            }
        }).exec();
    };

    events = {
        'reloadchart': () => {
            this.init();   
        }
    };

    methods = {
        canvasToTempFilePath (opt) {
            if (!opt.canvasId) {
                opt.canvasId = this.data.canvasId;
            }

            ctx.draw(true, () => {
                wepy.canvasToTempFilePath(opt, this);
            });
        },

        touchStart (e) {
            if (!this.data.ec.disableTouch && this.chart && e.touches.length > 0) {
                var touch = e.touches[0];
                this.chart._zr.handler.dispatch('mousedown', {
                    zrX: touch.x,
                    zrY: touch.y
                });
                this.chart._zr.handler.dispatch('mousemove', {
                    zrX: touch.x,
                    zrY: touch.y
                });
            }
        },

        touchMove (e) {
            if (!this.data.ec.disableTouch && this.chart && e.touches.length > 0) {
                var touch = e.touches[0];
                this.chart._zr.handler.dispatch('mousemove', {
                    zrX: touch.x,
                    zrY: touch.y
                });
            }
        },

        touchEnd (e) {
            if (!this.data.ec.disableTouch && this.chart) {
                const touch = e.changedTouches ? e.changedTouches[0] : {};
                this.chart._zr.handler.dispatch('mouseup', {
                    zrX: touch.x,
                    zrY: touch.y
                });
                this.chart._zr.handler.dispatch('click', {
                    zrX: touch.x,
                    zrY: touch.y
                });
            }
        }
    }
};
</script>